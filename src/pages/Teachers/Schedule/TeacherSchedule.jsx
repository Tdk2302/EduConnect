import React, { useState } from "react";
import { Button, Select, Tooltip, Modal } from "antd";
import {
  Box,
  Typography,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Chip,
  TextField,
  FormControl,
  InputLabel,
  MenuItem,
  Stack,
  Divider,
  IconButton,
} from "@mui/material";
import {
  LeftOutlined,
  RightOutlined,
  CloseOutlined,
  CheckCircleOutlined,
  CloseCircleOutlined,
  UserOutlined,
  EditOutlined,
} from "@ant-design/icons";
import "./TeacherSchedule.css";

const { Option } = Select;

// Mock student data for different classes
const studentData = {
  A1: [
    {
      id: 1,
      name: "Nguy·ªÖn VƒÉn An",
      attendance: "present",
      note: "",
      evaluation: "",
    },
    {
      id: 2,
      name: "Tr·∫ßn Th·ªã B√¨nh",
      attendance: "absent",
      note: "Ngh·ªâ ·ªëm",
      evaluation: "",
    },
    {
      id: 3,
      name: "L√™ VƒÉn C∆∞·ªùng",
      attendance: "present",
      note: "",
      evaluation: "H·ªçc sinh chƒÉm ch·ªâ",
    },
    {
      id: 4,
      name: "Ph·∫°m Th·ªã Dung",
      attendance: "present",
      note: "",
      evaluation: "",
    },
    {
      id: 5,
      name: "Ho√†ng VƒÉn Em",
      attendance: "late",
      note: "ƒêi mu·ªôn 10 ph√∫t",
      evaluation: "",
    },
  ],
  B2: [
    {
      id: 1,
      name: "V≈© Th·ªã Ph∆∞∆°ng",
      attendance: "present",
      note: "",
      evaluation: "T√≠ch c·ª±c ph√°t bi·ªÉu",
    },
    {
      id: 2,
      name: "ƒê·∫∑ng VƒÉn Quang",
      attendance: "present",
      note: "",
      evaluation: "",
    },
    {
      id: 3,
      name: "B√πi Th·ªã Hoa",
      attendance: "absent",
      note: "C√≥ vi·ªác gia ƒë√¨nh",
      evaluation: "",
    },
    {
      id: 4,
      name: "Ng√¥ VƒÉn Minh",
      attendance: "present",
      note: "",
      evaluation: "H·ªçc sinh ng·ªß trong gi·ªù",
    },
    {
      id: 5,
      name: "L√Ω Th·ªã Lan",
      attendance: "present",
      note: "",
      evaluation: "",
    },
  ],
  C3: [
    {
      id: 1,
      name: "ƒêinh VƒÉn Tu·∫•n",
      attendance: "present",
      note: "",
      evaluation: "L√†m b√†i t·∫≠p t·ªët",
    },
    {
      id: 2,
      name: "T√¥ Th·ªã Mai",
      attendance: "present",
      note: "",
      evaluation: "",
    },
    {
      id: 3,
      name: "H·ªì VƒÉn Nam",
      attendance: "late",
      note: "ƒêi mu·ªôn 5 ph√∫t",
      evaluation: "",
    },
    {
      id: 4,
      name: "D∆∞∆°ng Th·ªã H∆∞∆°ng",
      attendance: "present",
      note: "",
      evaluation: "T√≠ch c·ª±c th·∫£o lu·∫≠n",
    },
    {
      id: 5,
      name: "V√µ VƒÉn Th√†nh",
      attendance: "present",
      note: "",
      evaluation: "",
    },
  ],
  D4: [
    {
      id: 1,
      name: "L√¢m Th·ªã Nga",
      attendance: "present",
      note: "",
      evaluation: "H·ªçc sinh chƒÉm ch·ªâ",
    },
    {
      id: 2,
      name: "Tr·ªãnh VƒÉn S∆°n",
      attendance: "absent",
      note: "Ngh·ªâ ph√©p",
      evaluation: "",
    },
    {
      id: 3,
      name: "ƒêo√†n Th·ªã Th·∫£o",
      attendance: "present",
      note: "",
      evaluation: "",
    },
    {
      id: 4,
      name: "Hu·ª≥nh VƒÉn B√¨nh",
      attendance: "present",
      note: "",
      evaluation: "C·∫ßn c·∫£i thi·ªán th√°i ƒë·ªô",
    },
    {
      id: 5,
      name: "Nguy·ªÖn Th·ªã Trang",
      attendance: "present",
      note: "",
      evaluation: "",
    },
  ],
  E5: [
    {
      id: 1,
      name: "Phan VƒÉn H√πng",
      attendance: "present",
      note: "",
      evaluation: "T√≠ch c·ª±c ph√°t bi·ªÉu",
    },
    {
      id: 2,
      name: "V∆∞∆°ng Th·ªã Loan",
      attendance: "present",
      note: "",
      evaluation: "",
    },
    {
      id: 3,
      name: "TƒÉng VƒÉn D≈©ng",
      attendance: "late",
      note: "ƒêi mu·ªôn 15 ph√∫t",
      evaluation: "",
    },
    {
      id: 4,
      name: "Ch√¢u Th·ªã Nhi",
      attendance: "present",
      note: "",
      evaluation: "H·ªçc sinh ng·ªß trong gi·ªù",
    },
    {
      id: 5,
      name: "H√† VƒÉn Ph√∫c",
      attendance: "present",
      note: "",
      evaluation: "L√†m b√†i t·∫≠p t·ªët",
    },
  ],
  F6: [
    {
      id: 1,
      name: "L√Ω VƒÉn T√¢m",
      attendance: "present",
      note: "",
      evaluation: "",
    },
    {
      id: 2,
      name: "Tr∆∞∆°ng Th·ªã Vy",
      attendance: "present",
      note: "",
      evaluation: "H·ªçc sinh chƒÉm ch·ªâ",
    },
    {
      id: 3,
      name: "L√™ VƒÉn Kh·∫£i",
      attendance: "absent",
      note: "Ngh·ªâ ·ªëm",
      evaluation: "",
    },
    {
      id: 4,
      name: "Nguy·ªÖn Th·ªã Uy√™n",
      attendance: "present",
      note: "",
      evaluation: "T√≠ch c·ª±c th·∫£o lu·∫≠n",
    },
    {
      id: 5,
      name: "Tr·∫ßn VƒÉn Long",
      attendance: "present",
      note: "",
      evaluation: "",
    },
  ],
};

// Predefined evaluation options
const evaluationOptions = [
  "H·ªçc sinh chƒÉm ch·ªâ",
  "T√≠ch c·ª±c ph√°t bi·ªÉu",
  "L√†m b√†i t·∫≠p t·ªët",
  "T√≠ch c·ª±c th·∫£o lu·∫≠n",
  "H·ªçc sinh ng·ªß trong gi·ªù",
  "C·∫ßn c·∫£i thi·ªán th√°i ƒë·ªô",
  "ƒêi mu·ªôn th∆∞·ªùng xuy√™n",
  "Kh√¥ng t·∫≠p trung h·ªçc t·∫≠p",
  "C√≥ ti·∫øn b·ªô r√µ r·ªát",
  "C·∫ßn h·ªó tr·ª£ th√™m",
];

function getWeekDates(date) {
  const week = [];
  const startOfWeek = new Date(date);
  startOfWeek.setDate(
    date.getDate() - date.getDay() + (date.getDay() === 0 ? -6 : 1)
  );
  for (let i = 0; i < 7; i++) {
    const day = new Date(startOfWeek);
    day.setDate(startOfWeek.getDate() + i);
    week.push(
      day.toLocaleDateString("en-GB", { day: "2-digit", month: "2-digit" })
    );
  }
  return week;
}

const getStatusColor = (status) => {
  switch (status) {
    case "On-going":
      return "ongoing";
    case "Finished":
      return "finished";
    case "Canceled":
      return "canceled";
    case "Completed":
      return "completed";
    default:
      return "nostatus";
  }
};

const getStatusText = (status) => {
  switch (status) {
    case "On-going":
      return "On-going";
    case "Finished":
      return "Finished";
    case "Canceled":
      return "Canceled";
    case "Completed":
      return "Completed";
    default:
      return "Ch∆∞a c√≥";
  }
};

const isToday = (dateStr) => {
  const today = new Date();
  const [day, month] = dateStr.split("/");
  return (
    today.getDate() === Number(day) && today.getMonth() + 1 === Number(month)
  );
};

const SLOTS = [
  "Slot 1",
  "Slot 2",
  "Slot 3",
  "Slot 4",
  "Slot 5",
  "Slot 6",
  "Slot 7",
  "Slot 8",
];

const DAYS = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];

const STATUS_ICONS = {
  "On-going": "‚è≥",
  Finished: "‚úîÔ∏è",
  Canceled: "‚ùå",
  Completed: "üèÅ",
  nostatus: "‚Ä¢",
};

const STATUS_COLORS = {
  "On-going": { bg: "#e5eaf1", color: "#22304a" },
  Finished: { bg: "#e6f4ea", color: "#1a7f37" },
  Canceled: { bg: "#fbeaea", color: "#b42318" },
  Completed: { bg: "#f1f5f9", color: "#22304a" },
  nostatus: { bg: "#f3f4f6", color: "#7a869a" },
};

const Schedule = () => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedWeek, setSelectedWeek] = useState(getWeekDates(new Date()));
  const [selectedClass, setSelectedClass] = useState(null);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [students, setStudents] = useState([]);
  const [scheduleData, setScheduleData] = useState({
    "Slot 1": {
      "16/06": {
        subject: "Gi·∫£i t√≠ch 1",
        subjectCode: "MATH101",
        class: "A1",
        time: "7:00-9:15",
        status: "On-going",
        link: "meetURL1",
      },
      "17/06": {
        subject: "L·∫≠p tr√¨nh C",
        subjectCode: "CSD201",
        class: "B2",
        time: "7:00-9:15",
        status: "Finished",
        link: "meetURL2",
      },
      "18/06": {
        subject: "L·∫≠p tr√¨nh C",
        subjectCode: "CSD201",
        class: "B2",
        time: "7:00-9:15",
        status: "Canceled",
        link: "meetURL3",
      },
      "19/06": {
        subject: "L·∫≠p tr√¨nh C",
        subjectCode: "CSD201",
        class: "B2",
        time: "7:00-9:15",
        status: "Completed",
        link: "meetURL4",
      },
      "20/06": {
        subject: "L·∫≠p tr√¨nh C",
        subjectCode: "CSD201",
        class: "B2",
        time: "7:00-9:15",
        status: "On-going",
        link: "meetURL5",
      },
      "21/06": {
        subject: "C∆° s·ªü d·ªØ li·ªáu",
        subjectCode: "DBI202",
        class: "C3",
        time: "7:00-9:15",
        status: "On-going",
        link: "meetURL6",
      },
      "22/06": {
        subject: "C∆° s·ªü d·ªØ li·ªáu",
        subjectCode: "DBI202",
        class: "C3",
        time: "7:00-9:15",
        status: "On-going",
        link: "meetURL7",
      },
    },
    "Slot 2": {
      "16/06": {
        subject: "C∆° s·ªü d·ªØ li·ªáu",
        subjectCode: "DBI202",
        class: "C3",
        time: "9:30-11:45",
        status: "Finished",
        link: "meetURL8",
      },
      "17/06": {
        subject: "X√°c su·∫•t TK",
        subjectCode: "STA201",
        class: "D4",
        time: "9:30-11:45",
        status: "Completed",
        link: "meetURL9",
      },
      "18/06": {
        subject: "X√°c su·∫•t TK",
        subjectCode: "STA201",
        class: "D4",
        time: "9:30-11:45",
        status: "On-going",
        link: "meetURL10",
      },
      "19/06": {
        subject: "X√°c su·∫•t TK",
        subjectCode: "STA201",
        class: "D4",
        time: "9:30-11:45",
        status: "Canceled",
        link: "meetURL11",
      },
      "20/06": {
        subject: "X√°c su·∫•t TK",
        subjectCode: "STA201",
        class: "D4",
        time: "9:30-11:45",
        status: "On-going",
        link: "meetURL12",
      },
      "21/06": {
        subject: "C∆° s·ªü d·ªØ li·ªáu",
        subjectCode: "DBI202",
        class: "C3",
        time: "9:30-11:45",
        status: "On-going",
        link: "meetURL13",
      },
      "22/06": {
        subject: "C∆° s·ªü d·ªØ li·ªáu",
        subjectCode: "DBI202",
        class: "C3",
        time: "9:30-11:45",
        status: "On-going",
        link: "meetURL14",
      },
    },
    "Slot 3": {
      "16/06": {
        subject: "C·∫•u tr√∫c DL",
        subjectCode: "DSA201",
        class: "E5",
        time: "12:30-14:45",
        status: "Canceled",
        link: "meetURL15",
      },
      "17/06": {
        subject: "H·ªá ƒëi·ªÅu h√†nh",
        subjectCode: "OSG202",
        class: "F6",
        time: "12:30-14:45",
        status: "Finished",
        link: "meetURL16",
      },
      "18/06": {
        subject: "H·ªá ƒëi·ªÅu h√†nh",
        subjectCode: "OSG202",
        class: "F6",
        time: "12:30-14:45",
        status: "On-going",
        link: "meetURL17",
      },
      "19/06": {
        subject: "H·ªá ƒëi·ªÅu h√†nh",
        subjectCode: "OSG202",
        class: "F6",
        time: "12:30-14:45",
        status: "Completed",
        link: "meetURL18",
      },
      "20/06": {
        subject: "H·ªá ƒëi·ªÅu h√†nh",
        subjectCode: "OSG202",
        class: "F6",
        time: "12:30-14:45",
        status: "On-going",
        link: "meetURL19",
      },
      "21/06": {
        subject: "C·∫•u tr√∫c DL",
        subjectCode: "DSA201",
        class: "E5",
        time: "12:30-14:45",
        status: "On-going",
        link: "meetURL20",
      },
      "22/06": {
        subject: "C·∫•u tr√∫c DL",
        subjectCode: "DSA201",
        class: "E5",
        time: "12:30-14:45",
        status: "On-going",
        link: "meetURL21",
      },
    },
    "Slot 4": {
      "16/06": { status: "On-going", time: "15:00-16:30" },
      "17/06": { status: "On-going", time: "15:00-16:30" },
      "18/06": { status: "On-going", time: "15:00-16:30" },
      "19/06": { status: "On-going", time: "15:00-16:30" },
      "20/06": { status: "On-going", time: "15:00-16:30" },
      "21/06": { status: "On-going", time: "15:00-16:30" },
      "22/06": { status: "On-going", time: "15:00-16:30" },
    },
    "Slot 5": {
      "16/06": { status: "Finished", time: "16:45-18:00" },
      "17/06": { status: "Finished", time: "16:45-18:00" },
      "18/06": { status: "Finished", time: "16:45-18:00" },
      "19/06": { status: "Finished", time: "16:45-18:00" },
      "20/06": { status: "Finished", time: "16:45-18:00" },
      "21/06": { status: "Finished", time: "16:45-18:00" },
      "22/06": { status: "Finished", time: "16:45-18:00" },
    },
    "Slot 6": {
      "16/06": { status: "Canceled", time: "18:15-19:30" },
      "17/06": { status: "Canceled", time: "18:15-19:30" },
      "18/06": { status: "Canceled", time: "18:15-19:30" },
      "19/06": { status: "Canceled", time: "18:15-19:30" },
      "20/06": { status: "Canceled", time: "18:15-19:30" },
      "21/06": { status: "Canceled", time: "18:15-19:30" },
      "22/06": { status: "Canceled", time: "18:15-19:30" },
    },
    "Slot 7": {
      "16/06": { status: "Completed", time: "19:45-21:00" },
      "17/06": { status: "Completed", time: "19:45-21:00" },
      "18/06": { status: "Completed", time: "19:45-21:00" },
      "19/06": { status: "Completed", time: "19:45-21:00" },
      "20/06": { status: "Completed", time: "19:45-21:00" },
      "21/06": { status: "Completed", time: "19:45-21:00" },
      "22/06": { status: "Completed", time: "19:45-21:00" },
    },
    "Slot 8": {
      "16/06": { status: "On-going", time: "21:15-22:30" },
      "17/06": { status: "Finished", time: "21:15-22:30" },
      "18/06": { status: "Canceled", time: "21:15-22:30" },
      "19/06": { status: "Completed", time: "21:15-22:30" },
      "20/06": { status: "On-going", time: "21:15-22:30" },
      "21/06": { status: "On-going", time: "21:15-22:30" },
      "22/06": { status: "On-going", time: "21:15-22:30" },
    },
  });

  const handleWeekChange = (direction) => {
    const newDate = new Date(currentDate);
    newDate.setDate(newDate.getDate() + (direction === "prev" ? -7 : 7));
    setCurrentDate(newDate);
    setSelectedWeek(getWeekDates(newDate));
  };

  const handleYearChange = (value) => {
    const newDate = new Date(currentDate);
    newDate.setFullYear(Number(value));
    setCurrentDate(newDate);
    setSelectedWeek(getWeekDates(newDate));
  };

  const generateYearOptions = () => {
    const currentYear = new Date().getFullYear();
    const years = [];
    for (let i = currentYear - 5; i <= currentYear + 5; i++) {
      years.push(
        <Option key={i} value={String(i)}>
          {i}
        </Option>
      );
    }
    return years;
  };

  // Ch·ªâ toggle gi·ªØa 4 tr·∫°ng th√°i khi click cell KH√îNG c√≥ subject (n·∫øu mu·ªën toggle c·∫£ subject th√¨ s·ª≠a ch·ªó n√†y)
  const handleAttendanceToggle = (slot, date) => {
    setScheduleData((prev) => {
      const newData = { ...prev };
      const current = newData[slot][date]?.status;
      const nextStatus = {
        "On-going": "Finished",
        Finished: "Canceled",
        Canceled: "Completed",
        Completed: "On-going",
      };
      newData[slot][date].status = nextStatus[current] || "On-going";
      return newData;
    });
  };

  const handleCellClick = (slot, date, data) => {
    if (data && data.class) {
      setSelectedClass({ slot, date, ...data });
      setStudents([...(studentData[data.class] || [])]);
      setIsModalVisible(true);
    } else {
      // Toggle status for empty cells
      handleAttendanceToggle(slot, date);
    }
  };

  const handleAttendanceChange = (studentId, attendance) => {
    setStudents((prev) =>
      prev.map((student) =>
        student.id === studentId ? { ...student, attendance } : student
      )
    );
  };

  const handleNoteChange = (studentId, note) => {
    setStudents((prev) =>
      prev.map((student) =>
        student.id === studentId ? { ...student, note } : student
      )
    );
  };

  const handleEvaluationChange = (studentId, evaluation) => {
    setStudents((prev) =>
      prev.map((student) =>
        student.id === studentId ? { ...student, evaluation } : student
      )
    );
  };

  const getAttendanceColor = (attendance) => {
    switch (attendance) {
      case "present":
        return "#10B981";
      case "absent":
        return "#EF4444";
      case "late":
        return "#F59E0B";
      default:
        return "#9CA3AF";
    }
  };

  const getAttendanceText = (attendance) => {
    switch (attendance) {
      case "present":
        return "C√≥ m·∫∑t";
      case "absent":
        return "V·∫Øng";
      case "late":
        return "Mu·ªôn";
      default:
        return "Ch∆∞a ƒëi·ªÉm danh";
    }
  };

  return (
    <>
      <div className="schedule-container office-style">
        <div className="schedule-header office-header">
          <div className="left">
            <Select
              defaultValue={String(currentDate.getFullYear())}
              onChange={handleYearChange}
              className="schedule-select"
            >
              {generateYearOptions()}
            </Select>
            <span className="week-text">
              WEEK {selectedWeek[0]} to {selectedWeek[6]}
            </span>
          </div>
          <div className="right">
            <Button
              icon={<LeftOutlined />}
              onClick={() => handleWeekChange("prev")}
              className="nav-btn"
            />
            <Button
              icon={<RightOutlined />}
              onClick={() => handleWeekChange("next")}
              className="nav-btn"
            />
          </div>
        </div>
        <div className="schedule-content office-content">
          <div className="table-scroll">
            <table className="schedule-table office-table">
              <thead>
                <tr>
                  <th className="th-slot fixed-col office-slot">Slot</th>
                  {selectedWeek.map((date, idx) => (
                    <th
                      key={date}
                      className={`th-date office-date ${isToday(date) ? "today-header" : ""}`}
                    >
                      {DAYS[idx]}
                      <br />
                      {date}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {SLOTS.map((slot, slotIdx) => (
                  <tr key={slot}>
                    <td className="td-slot fixed-col office-slot">
                      <span className="slot-icon">
                        {String.fromCodePoint(0x2460 + slotIdx)}
                      </span>{" "}
                      {slot}
                    </td>
                    {selectedWeek.map((date) => {
                      const data = scheduleData[slot][date];
                      const statusColor =
                        STATUS_COLORS[data?.status] || STATUS_COLORS.nostatus;
                      return (
                        <td
                          key={`${slot}-${date}`}
                          className={`td-cell office-cell ${isToday(date) ? "today-cell" : ""}`}
                          style={{
                            background: statusColor.bg,
                            cursor: data && data.class ? "pointer" : "default",
                          }}
                          title={data && data.link ? data.link : ""}
                          onClick={() => handleCellClick(slot, date, data)}
                        >
                          {data ? (
                            <div className="cell-office-main">
                              {data.subject && (
                                <div className="cell-office-subject">
                                  {data.subject}
                                </div>
                              )}
                              {data.subjectCode && (
                                <div className="cell-office-code">
                                  {data.subjectCode}
                                </div>
                              )}
                              {data.class && (
                                <div className="cell-office-class">
                                  L·ªõp: {data.class}
                                </div>
                              )}
                              {data.time && (
                                <div className="cell-office-time">
                                  {data.time}
                                </div>
                              )}
                              <div
                                className="office-status-badge"
                                style={{
                                  background: statusColor.bg,
                                  color: statusColor.color,
                                  border: "none",
                                  fontWeight: 600,
                                  fontSize: 13,
                                  marginTop: 2,
                                }}
                              >
                                {getStatusText(data.status)}
                              </div>
                            </div>
                          ) : (
                            <span className="nodata">-</span>
                          )}
                        </td>
                      );
                    })}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      {/* Class Details Modal */}
      <Modal
        title={
          <Box sx={{ display: "flex", alignItems: "center", gap: 2 }}>
            <Typography variant="h6" fontWeight={700} color="#6D28D9">
              Chi ti·∫øt l·ªõp {selectedClass?.class}
            </Typography>
            <Typography variant="body2" color="#9CA3AF">
              {selectedClass?.subject} - {selectedClass?.time}
            </Typography>
          </Box>
        }
        open={isModalVisible}
        onCancel={() => setIsModalVisible(false)}
        width={800}
        footer={null}
        destroyOnClose
        bodyStyle={{ maxHeight: "80vh", overflow: "auto", padding: 24 }}
      >
        <Box sx={{ mt: 2 }}>
          <Typography
            variant="subtitle1"
            fontWeight={600}
            mb={2}
            color="#1F2937"
          >
            Danh s√°ch h·ªçc sinh ({students.length} h·ªçc sinh)
          </Typography>
          <List sx={{ mt: 2, maxHeight: "60vh", overflow: "auto" }}>
            {students.map((student) => (
              <ListItem
                key={student.id}
                sx={{
                  border: "1px solid #E5E7EB",
                  borderRadius: 2,
                  mb: 1,
                  p: 2,
                  background: "#ffffff",
                }}
              >
                <ListItemIcon>
                  <UserOutlined style={{ color: "#6D28D9" }} />
                </ListItemIcon>
                <ListItemText
                  primary={
                    <Box
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        gap: 2,
                        mb: 1,
                      }}
                    >
                      <Typography
                        variant="body1"
                        fontWeight={600}
                        color="#1F2937"
                      >
                        {student.name}
                      </Typography>
                      <Chip
                        label={getAttendanceText(student.attendance)}
                        size="small"
                        style={{
                          backgroundColor: getAttendanceColor(
                            student.attendance
                          ),
                          color: "#ffffff",
                          fontWeight: 600,
                        }}
                      />
                    </Box>
                  }
                  secondary={
                    <Stack spacing={1} sx={{ mt: 1 }}>
                      <Box
                        sx={{ display: "flex", gap: 1, alignItems: "center" }}
                      >
                        <Typography
                          variant="caption"
                          color="#9CA3AF"
                          sx={{ minWidth: 60 }}
                        >
                          Ghi ch√∫:
                        </Typography>
                        <TextField
                          size="small"
                          placeholder="Ghi ch√∫..."
                          value={student.note}
                          onChange={(e) =>
                            handleNoteChange(student.id, e.target.value)
                          }
                          sx={{
                            flex: 1,
                            "& .MuiOutlinedInput-root": {
                              fontSize: "0.875rem",
                            },
                          }}
                        />
                      </Box>
                      <Box
                        sx={{ display: "flex", gap: 1, alignItems: "center" }}
                      >
                        <Typography
                          variant="caption"
                          color="#9CA3AF"
                          sx={{ minWidth: 60 }}
                        >
                          ƒê√°nh gi√°:
                        </Typography>
                        <FormControl size="small" sx={{ flex: 1 }}>
                          <Select
                            value={student.evaluation}
                            onChange={(e) =>
                              handleEvaluationChange(student.id, e.target.value)
                            }
                            displayEmpty
                            sx={{ fontSize: "0.875rem" }}
                          >
                            <MenuItem value="">Kh√¥ng c√≥ ƒë√°nh gi√°</MenuItem>
                            {evaluationOptions.map((option) => (
                              <MenuItem key={option} value={option}>
                                {option}
                              </MenuItem>
                            ))}
                          </Select>
                        </FormControl>
                      </Box>
                    </Stack>
                  }
                />
                <Box sx={{ display: "flex", gap: 1 }}>
                  <IconButton
                    size="small"
                    onClick={() =>
                      handleAttendanceChange(student.id, "present")
                    }
                    sx={{
                      color:
                        student.attendance === "present"
                          ? "#10B981"
                          : "#9CA3AF",
                      "&:hover": { color: "#10B981" },
                    }}
                  >
                    <CheckCircleOutlined />
                  </IconButton>
                  <IconButton
                    size="small"
                    onClick={() => handleAttendanceChange(student.id, "absent")}
                    sx={{
                      color:
                        student.attendance === "absent" ? "#EF4444" : "#9CA3AF",
                      "&:hover": { color: "#EF4444" },
                    }}
                  >
                    <CloseCircleOutlined />
                  </IconButton>
                </Box>
              </ListItem>
            ))}
          </List>
        </Box>
      </Modal>
    </>
  );
};

export default Schedule;
